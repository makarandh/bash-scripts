#!/bin/bash

################################################################
# This program is free software: you can redistribute it and/or modify 
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
################################################################


################################################################
############################ INIT ##############################
################################################################

print_usage() {
    echo "Usage: $(basename ${1}) OPTION..."

    echo -e "\n Update components depending on the options provided"
    echo " Whether a specified command runs or not is contingent on the component being available in the system."

    echo -e "\nSwitches:"
    echo " -d            Updates dnf packages"
    echo " -t            Updates apt pacakges"
    echo " -s            Updates snap packages"
    echo " -f            Updates flatpak packages"
    echo " -n            Updates npm global"
    echo " -p            Installs/Updates python3 packages mentioned below"
    echo " -g            Updates Ubuntu drivers (Nvidia)"
    echo " -a            Runs all of the above, whatever is available"
    echo " -h            Prints this help menu and exits"

    echo -e "\nPython 3 packages: pip setuptools wheel youtube-dl numpy matplotlib speedtest-cli virtualenv scipy pipenv" 
}

UPDATE_APT=0
UPDATE_DNF=0
UPDATE_SNAP=0
UPDATE_FLAT=0
UPDATE_NPM=0
UPDATE_PY=0
UPDATE_DRIV=0

if [[ ${#} -eq 0 ]]
then
    echo -e "ERROR: No options specified.\n"
    print_usage ${0}
    exit 1
fi

while getopts dtsfnpgah OPTION
do
    case ${OPTION} in 
        "a")
            UPDATE_APT=1
            UPDATE_DNF=1
            UPDATE_SNAP=1
            UPDATE_FLAT=1
            UPDATE_NPM=1
            UPDATE_PY=1
            UPDATE_DRIV=1
            ;;
        "d")
            UPDATE_DNF=1
            ;;
        "t")
            UPDATE_APT=1
            ;;
        "s")
            UPDATE_SNAP=1
            ;;
        "f")
            UPDATE_FLAT=1
            ;;
        "g")
            UPDATE_DRIV=1
            ;;
        "n")
            UPDATE_NPM=1
            ;;
        "p")
            UPDATE_PY=1
            ;;
        "h")
            print_usage ${0}
            exit 0
            ;;
        *)
            print_usage ${0}
            exit 1
            ;;
    esac
done

shift $((${OPTIND} - 1))

if [[ ${#} -gt 0 ]]
then
    echo "Error: Argument not recognized: ${1}"
    print_usage ${0}
    exit 1
fi


let UPDATE_COUNT=0

################################################################
######################## APT UPDATE ############################
################################################################

apt --version > /dev/null 2>&1 
APT_EXISTS=${?}

if [[ ${APT_EXISTS} -eq 0 && ${UPDATE_APT} -eq 1 ]]
then
    let UPDATE_COUNT++
    echo -e "\n===================================================================="
    echo -e " Updating Apt Packages"
    echo -e "====================================================================\n"

    echo -e "\nRunning apt update..."
    echo -e "--------------------------------------------------------------------\n"
    sudo apt update -y 
    UPDATE_EXIT_CODE=${?}

    echo -e "\nRunning dpkg configure..."
    echo -e "--------------------------------------------------------------------\n"
    sudo dpkg --configure -a

    echo -e "\nRunning apt install -f..."
    echo -e "--------------------------------------------------------------------\n"
    sudo apt install -f -y

    echo -e "\nRunning apt autoremove..."
    echo -e "--------------------------------------------------------------------\n"
    sudo apt autoremove -y 

    echo -e "\nRunning apt full-upgrade..."
    echo -e "--------------------------------------------------------------------\n"
    sudo apt full-upgrade -y 
    UPGRADE_EXIT_CODE=${?}

    echo -e "\nRunning apt install -f..."
    echo -e "--------------------------------------------------------------------\n"
    sudo apt install -f -y

    echo -e "\nRunning apt autoremove..."
    echo -e "--------------------------------------------------------------------\n"
    sudo apt autoremove -y 

    echo -e "\nRunning apt clean..."
    echo -e "--------------------------------------------------------------------\n"
    sudo apt clean 

    echo -e "\nDone"
    echo -e "--------------------------------------------------------------------\n"
fi


################################################################
######################## DNF UPDATE ############################
################################################################

dnf --version > /dev/null 2>&1 
DNF_EXISTS=${?}

if [[ ${DNF_EXISTS} -eq 0 && ${UPDATE_DNF} -eq 1 ]]
then
    let UPDATE_COUNT++
    echo -e "\n===================================================================="
    echo -e " Updating Dnf Packages"
    echo -e "====================================================================\n"

    echo -e "\nRunning dnf update..."
    echo -e "--------------------------------------------------------------------\n"
    sudo dnf update -y
    DNF_UPDATE_EXIT_CODE=${?}

    echo -e "\nRunning dnf autoremove..."
    echo -e "--------------------------------------------------------------------\n"
    sudo dnf autoremove -y 

    echo -e "\nRunning dnf clean..."
    echo -e "--------------------------------------------------------------------\n"
    sudo dnf clean dbcache packages

    echo -e "\nDone"
    echo -e "--------------------------------------------------------------------\n"
fi


################################################################
####################### NVIDIA UPDATE ##########################
################################################################

ubuntu-drivers -h > /dev/null 2>&1
UBUNTU_DRIVERS_EXISTS=${?}

if [[ ${UBUNTU_DRIVERS_EXISTS} -eq 0 && $(id -u) -eq 0 && ${UPDATE_DRIV} -eq 1 ]]
then
    let UPDATE_COUNT++
	echo -e "\n===================================================================="
	echo -e " Running ubuntu-drivers autoinstall..."
	echo -e "====================================================================\n"
	ubuntu-drivers autoinstall
	UBUNTU_DRIVERS_EXIT_CODE=${?}
	echo -e "\nDone"
	echo -e "--------------------------------------------------------------------\n"
fi


################################################################
####################### SNAP UPDATE ############################
################################################################

snap --version > /dev/null 2>&1
SNAP_EXISTS=${?}

if [[ ${SNAP_EXISTS} -eq 0 && ${UPDATE_SNAP} -eq 1 ]]
then
    let UPDATE_COUNT++
	echo -e "\n===================================================================="
	echo -e " Running snap refresh..."
	echo -e "====================================================================\n"
	sudo snap refresh 
	SNAP_EXIT_CODE=${?}
	echo -e "\nDone"
	echo -e "--------------------------------------------------------------------\n"
fi


################################################################
##################### FLATPAK UPDATE ###########################
################################################################

flatpak --version > /dev/null 2>&1
FLATPAK_EXISTS=${?}

if [[ ${FLATPAK_EXISTS} -eq 0 && ${UPDATE_FLAT} -eq 1 ]]
then
    let UPDATE_COUNT++
	echo -e "\n===================================================================="
	echo -e " Running flatpak update..."
	echo -e "====================================================================\n"
	sudo flatpak update
	FLATPAK_EXIT_CODE=${?}
	echo -e "\nDone"
	echo -e "--------------------------------------------------------------------\n"
fi


################################################################
######################### NPM UPDATE ###########################
################################################################

npm --version > /dev/null 2>&1
NPM_EXISTS=${?}

if [[ ${NPM_EXISTS} -eq 0 && ${UPDATE_NPM} -eq 1 ]]
then
    let UPDATE_COUNT++
	echo -e "\n===================================================================="
	echo -e " Running npm update..."
	echo -e "====================================================================\n"
    
    which ncu &> /dev/null
    if [[ ${?} -ne 0 ]]
    then
        sudo npm i -g npm-check-updates
    fi

	ncu -g
	sudo npm update -g
	NPM_EXIT_CODE=${?}
	echo -e "\nDone"
	echo -e "--------------------------------------------------------------------\n"
fi


################################################################
######################### PYTHON UPDATE ########################
################################################################

PYTHON3="/usr/bin/python3" 
${PYTHON3} --version > /dev/null 2>&1
PYTHON_EXISTS=${?}

if [[ ${PYTHON_EXISTS} -eq 0 && ${UPDATE_PY} -eq 1 ]]
then
    let UPDATE_COUNT++
	echo -e "\n===================================================================="
	echo -e " Updating Python packages..."
	echo -e "====================================================================\n"
	sudo ${PYTHON3} -m pip install --upgrade pip setuptools wheel youtube-dl numpy matplotlib speedtest-cli virtualenv scipy pipenv 
	PIP_EXIT_CODE=${?}
	echo -e "\nDone"
	echo -e "--------------------------------------------------------------------\n"
fi


################################################################
######################## STATUS MESSAGE ########################
################################################################

if [[ ${UPDATE_COUNT} -eq 0 ]]
then
    echo "None of the selected components were found in the system."
    exit 0
fi

echo -e "\n===================================================================="
echo -e " Operations completed with the following exit codes:(0 = SUCCESS)"
echo -e "====================================================================\n"
if [[ ${APT_EXISTS} -eq 0 && ${UPDATE_APT} -eq 1 ]]
then
    echo "APT UPDATE : ${UPDATE_EXIT_CODE}"
    echo "APT UPGRADE: ${UPGRADE_EXIT_CODE}"
else
    UPDATE_EXIT_COLDE=0
    UPGRADE_EXIT_CODE=0
fi

if [[ ${DNF_EXISTS} -eq 0 && ${UPDATE_DNF} -eq 1 ]]
then
    echo "DNF UPDATE : ${DNF_UPDATE_EXIT_CODE}"
else
    DNF_UPDATE_EXIT_CODE=0
fi

if [[ ${UBUNTU_DRIVERS_EXISTS} -eq 0 && $(id -u) -eq 0 && ${UPDATE_DRIV} -eq 1 ]]
then
	echo "NVIDIA     : ${UBUNTU_DRIVERS_EXIT_CODE}"
else
    UBUNTU_DRIVERS_EXIT_CODE=0
fi

if [[ ${SNAP_EXISTS} -eq 0 && ${UPDATE_SNAP} -eq 1 ]]
then
	echo "SNAP       : ${SNAP_EXIT_CODE}"
else 
    SNAP_EXIT_CODE=0
fi

if [[ ${FLATPAK_EXISTS} -eq 0 && ${UPDATE_FLAT} -eq 1 ]]
then
	echo "FLATPAK    : ${FLATPAK_EXIT_CODE}"
else
    FLATPAK_EXIT_CODE=0
fi

if [[ ${NPM_EXISTS} -eq 0 && ${UPDATE_NPM} -eq 1 ]]
then
	echo "NODE GLOBAL: ${NPM_EXIT_CODE}"
else
    NPM_EXIT_CODE=0
fi

if [[ ${PYTHON_EXISTS} -eq 0 && ${UPDATE_PY} -eq 1 ]]
then
	echo "PYTHON 3   : ${PIP_EXIT_CODE}"
else
    PIP_EXIT_CODE=0
fi

echo ""
echo -e "\nTotal components for which update was run: ${UPDATE_COUNT}"
echo -e "--------------------------------------------------------------------\n"

exit ${UPDATE_EXIT_CODE} || ${UPGRADE_EXIT_CODE} || ${DNF_UPDATE_EXIT_CODE} || ${UBUNTU_DRIVERS_EXIT_CODE} || ${SNAP_EXIT_CODE} || ${FLATPAK_EXIT_CODE} || ${NPM_EXIT_CODE} || ${PIP_EXIT_CODE}
