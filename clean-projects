#!/bin/bash

################################################################
# This program is free software: you can redistribute it and/or modify 
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
################################################################


print_help() {
    echo -e "Usage: $(basename ${0}) [-f] CLEANING_OPTION... DIR... "
    echo -e "$(basename ${0}) -h"
    echo -e "Cleans directories recurisively by deleting temporary, compiled, and downloaded modules."
    echo -e "Languages supported: Python, Gradle, Java, NodeJS, Php."
    echo -e "\nNOTE: It is not safe to provide the home directory as argument. \nThe script will exit if the argument is the user's home directory. \nTo force clean the home directory, use the -f switch."
    echo -e "The script may not be able to clean directories with spaces in their names."
    echo -e "\nCleaning options:"
    echo -e " -a           Will clean all files."
    echo -e " -y           Will clean Python files. Will delete .pyc files."
    echo -e " -j           Will clean Java files. Will delete .class and .jar files."
    echo -e " -g           Will clean Gradle projects. Will run gradlew clean."
    echo -e " -n           Will clean node files. Will delete node_modules folders and contents."
    echo -e " -p           Will clean PHP files. Will delete composer vendor folders and contents."
    echo -e " -d           Will clean Arduino uno built folders cmake-build-debug and cmake-build-uno."

    echo -e "\nAdditional options:"
    echo -e " -f           Will clean user's home directory, if it's in the arguments."
    echo -e " -h           Will display this help and exit."
}

CLEAN_PY=0
CLEAN_JAVA=0
CLEAN_GRADLE=0
CLEAN_NODE=0
CLEAN_PHP=0
CLEAN_PHP=0
FORCE_HOME=0

COLOR_RED='\e[01;31m'
COLOR_GREEN='\e[01;32m'
COLOR_WHITE='\e[01;37m'
COLOR_NONE='\e[0m'

OPTIONS_COUNT=0
while getopts ayjgnpfh OPTION
do
    let OPTIONS_COUNT++
    case ${OPTION} in
        "a")
            CLEAN_PY=1
            CLEAN_JAVA=1
            CLEAN_GRADLE=1
            CLEAN_NODE=1
            CLEAN_PHP=1
            CLEAN_UNO=1
            ;;
        "d")
            CLEAN_UNO=1
            ;;
        "y")
            CLEAN_PY=1
            ;;
        "j")
            CLEAN_JAVA=1
            ;;
        "g")
            CLEAN_GRADLE=1
            ;;
        "n")
            CLEAN_NODE=1
            ;;
        "p")
            CLEAN_PHP=1
            ;;
        "f")
            let OPTIONS_COUNT--
            FORCE_HOME=1
            ;;
        "h")
            print_help
            exit 0 
            ;;
        *)
            echo -e "${COLOR_RED}ERROR: Invalid option: ${OPTION}${COLOR_NONE}"
            print_help
            exit 1
            ;;
    esac
done

if [[ ${OPTIONS_COUNT} -eq 0 ]]
then
	echo -e "${COLOR_RED}Error: No cleaning options were provided.${COLOR_NONE}"
    print_help
	exit 1
fi

shift $((${OPTIND} - 1))

if [[ ${#} -eq 0 ]]
then
	echo -e "${COLOR_RED}Error: No directories were specified for cleaning.${COLOR_NONE}"
    print_help
	exit 1
fi

declare -a ERROR_FILES
ERROR_COUNT=0

for DIR_TO_CLEAN in ${@}
do
    if [[ ! -d ${DIR_TO_CLEAN} ]]
    then
        echo -e "${COLOR_RED}${DIR_TO_CLEAN} is not a directory. Skipping...${COLOR_NONE}"
        continue
    fi

    if [[ ${HOME} == $(cd "${DIR_TO_CLEAN}"; pwd) && ${FORCE_HOME} -eq 0 ]]
    then
        echo -e "${COLOR_RED}Users Home directory selected without the -f option. Skipping...${COLOR_NONE}"
        continue
    fi
    ORIGINAL_DIR="${PWD}"
    DIR_TO_CLEAN=$(cd "${DIR_TO_CLEAN}"; pwd)
    echo -e "${COLOR_GREEN}\nCleaning ${DIR_TO_CLEAN}${COLOR_NONE}"

    if [[ ${CLEAN_PY} -eq 1 ]]
    then
        echo -e "${COLOR_GREEN}\nCleaning Python projects${COLOR_NONE}"
        echo -e "${COLOR_WHITE}=======================================================${COLOR_NONE}"

        cd "${DIR_TO_CLEAN}"
        while read FILE_TO_DEL
        do
            if [[ -f ${FILE_TO_DEL} ]]
            then
                echo -e "${COLOR_GREEN}Deleting ${FILE_TO_DEL}${COLOR_NONE}"
                rm -f "${FILE_TO_DEL}"
                if [[ ${?} -ne 0 ]]
                then
                    ERROR_FILES[${ERROR_COUNT}]="${FILE_TO_DEL}"
                    let ERROR_COUNT++
                fi
            else
                echo -e "${COLOR_RED}ERROR: Could not delete ${FILE_TO_DEL} --- Not a file${COLOR_NONE}"
                ERROR_FILES[${ERROR_COUNT}]="${FILE_TO_DEL}"
                let ERROR_COUNT++
            fi
        done < <(find . -type f -name "*.pyc") 
        echo -e "${COLOR_GREEN}Done${COLOR_NONE}"
        echo -e "${COLOR_WHITE}-------------------------------------------------------${COLOR_NONE}"
    fi

    if [[ ${CLEAN_GRADLE} -eq 1 ]]
    then
        echo -e "${COLOR_GREEN}\nCleaning Gradle projects${COLOR_NONE}"
        echo -e "${COLOR_WHITE}=======================================================${COLOR_NONE}"

        cd "${DIR_TO_CLEAN}"
        PARENT_DIR=${PWD}
        while read FILE_TO_CLEAN
        do
            if [[ -x ${FILE_TO_CLEAN} ]]
            then
                echo -e "${COLOR_GREEN}\nGradle file found ${FILE_TO_CLEAN}${COLOR_NONE}"
                PROJ_DIR=$(dirname "${FILE_TO_CLEAN}")
                echo -e "${COLOR_GREEN}Descending into ${PROJ_DIR}${COLOR_NONE}"
                cd "${PROJ_DIR}"
                ./gradlew clean
                cd "${PARENT_DIR}"
                echo 
            else
                echo -e "${COLOR_RED}ERROR: Could not clean gradle project: ${FILE_TO_CLEAN}.${COLOR_NONE}"
                ERROR_FILES[${ERROR_COUNT}]="${FILE_TO_CLEAN}"
                let ERROR_COUNT++
            fi
        done < <(find . -type f -name "*gradlew") 
        kill -15 $( ps -ef | grep -i "java" | grep -i "gradle" | tr -s " " | cut -d " " -f 2 ) 2> /dev/null
        echo -e "${COLOR_GREEN}Done${COLOR_NONE}"
        echo -e "${COLOR_WHITE}-------------------------------------------------------${COLOR_NONE}"
    fi

    if [[ ${CLEAN_JAVA} -eq 1 ]]
    then
        echo -e "${COLOR_GREEN}\nCleaning Java projects${COLOR_NONE}"
        echo -e "${COLOR_WHITE}=======================================================${COLOR_NONE}"

        cd "${DIR_TO_CLEAN}"
        while read FILE_TO_DEL
        do
            if [[ -f ${FILE_TO_DEL} ]]
            then
                echo -e "${COLOR_GREEN}Deleting ${FILE_TO_DEL}${COLOR_NONE}"
                rm -f "${FILE_TO_DEL}"
                if [[ ${?} -ne 0 ]]
                then
                    ERROR_FILES[${ERROR_COUNT}]="${FILE_TO_DEL}"
                    let ERROR_COUNT++
                fi
            else
                echo -e "${COLOR_RED}ERROR: Could not delete ${FILE_TO_DEL} --- Not a file${COLOR_NONE}"
                ERROR_FILES[${ERROR_COUNT}]="${FILE_TO_DEL}"
                let ERROR_COUNT++
            fi
        done < <(find . -type f -name "*class")

        cd "${DIR_TO_CLEAN}"
        while read FILE_TO_DEL
        do
            if [[ -f ${FILE_TO_DEL} ]]
            then
                echo -e "${COLOR_GREEN}Deleting ${FILE_TO_DEL}${COLOR_NONE}"
                rm -f "${FILE_TO_DEL}"
                if [[ ${?} -ne 0 ]]
                then
                    ERROR_FILES[${ERROR_COUNT}]="${FILE_TO_DEL}"
                    let ERROR_COUNT++
                fi
            else
                echo -e "${COLOR_RED}ERROR: Could not delete ${FILE_TO_DEL} --- Not a file${COLOR_NONE}"
                ERROR_FILES[${ERROR_COUNT}]="${FILE_TO_DEL}"
                let ERROR_COUNT++
            fi
        done < <(find . -type f -iname "*jar" | grep 'out/artifacts')
        
        echo -e "${COLOR_GREEN}Done${COLOR_NONE}"
        echo -e "${COLOR_WHITE}-------------------------------------------------------${COLOR_NONE}"
    fi

    if [[ ${CLEAN_NODE} -eq 1 ]]
    then
        echo -e "${COLOR_GREEN}\nCleaning node_modules${COLOR_NONE}"
        echo -e "${COLOR_WHITE}=======================================================${COLOR_NONE}"

        cd "${DIR_TO_CLEAN}"
        while read FILE_TO_DEL
        do
            if [[ ! -d $(echo ${FILE_TO_DEL} | sed 's/\/node_modules//g') ]]
            then
                continue
            fi

            if [[ -d ${FILE_TO_DEL} ]]
            then
                echo -e "${COLOR_GREEN}Deleting ${FILE_TO_DEL}${COLOR_NONE}"
                rm -rf "${FILE_TO_DEL}"
                if [[ ${?} -ne 0 ]]
                then
                    ERROR_FILES[${ERROR_COUNT}]="${FILE_TO_DEL}"
                    let ERROR_COUNT++
                fi
            else
                echo -e "${COLOR_RED}ERROR: Could not delete ${FILE_TO_DEL} --- Not a directory${COLOR_NONE}"
                ERROR_FILES[${ERROR_COUNT}]="${FILE_TO_DEL}"
                let ERROR_COUNT++
            fi
        done < <(find . -type d -name "node_modules") 
        
        echo -e "${COLOR_GREEN}Done${COLOR_NONE}"
        echo -e "${COLOR_WHITE}-------------------------------------------------------${COLOR_NONE}"

    fi

    if [[ ${CLEAN_UNO} -eq 1 ]]
    then
        echo -e "${COLOR_GREEN}\nCleaning Arduino build folders${COLOR_NONE}"
        echo -e "${COLOR_WHITE}=======================================================${COLOR_NONE}"

        cd "${DIR_TO_CLEAN}"
        while read FILE_TO_DEL
        do
            if [[ ! -d $(echo ${FILE_TO_DEL} | sed 's/\/cmake-build-uno//g') ]]
            then
                continue
            fi

            if [[ -d ${FILE_TO_DEL} ]]
            then
                echo -e "${COLOR_GREEN}Deleting ${FILE_TO_DEL}${COLOR_NONE}"
                rm -rf "${FILE_TO_DEL}"
                if [[ ${?} -ne 0 ]]
                then
                    ERROR_FILES[${ERROR_COUNT}]="${FILE_TO_DEL}"
                    let ERROR_COUNT++
                fi
            else
                echo -e "${COLOR_RED}ERROR: Could not delete ${FILE_TO_DEL} --- Not a directory${COLOR_NONE}"
                ERROR_FILES[${ERROR_COUNT}]="${FILE_TO_DEL}"
                let ERROR_COUNT++
            fi
        done < <(find . -type d -name "cmake-build-uno") 
        
        cd "${DIR_TO_CLEAN}"
        while read FILE_TO_DEL
        do
            if [[ ! -d $(echo ${FILE_TO_DEL} | sed 's/\/cmake-build-debug//g') ]]
            then
                continue
            fi

            if [[ -d ${FILE_TO_DEL} ]]
            then
                echo -e "${COLOR_GREEN}Deleting ${FILE_TO_DEL}${COLOR_NONE}"
                rm -rf "${FILE_TO_DEL}"
                if [[ ${?} -ne 0 ]]
                then
                    ERROR_FILES[${ERROR_COUNT}]="${FILE_TO_DEL}"
                    let ERROR_COUNT++
                fi
            else
                echo -e "${COLOR_RED}ERROR: Could not delete ${FILE_TO_DEL} --- Not a directory${COLOR_NONE}"
                ERROR_FILES[${ERROR_COUNT}]="${FILE_TO_DEL}"
                let ERROR_COUNT++
            fi
        done < <(find . -type d -name "cmake-build-debug") 
        
        echo -e "${COLOR_GREEN}Done${COLOR_NONE}"
        echo -e "${COLOR_WHITE}-------------------------------------------------------${COLOR_NONE}"

    fi

    if [[ ${CLEAN_PHP} -eq 1 ]]
    then
        echo -e "${COLOR_GREEN}\nCleaning php composer vendor files${COLOR_NONE}"
        echo -e "${COLOR_WHITE}=======================================================${COLOR_NONE}"

        cd "${DIR_TO_CLEAN}"
        while read FILE_TO_DEL
        do
            if [[ ! -f "$(echo ${FILE_TO_DEL} | sed 's/vendor//g')/composer.json" ]]
            then
                continue
            fi
            if [[ -d ${FILE_TO_DEL} ]]
            then
                echo -e "${COLOR_GREEN}Deleting ${FILE_TO_DEL}${COLOR_NONE}"
                rm -rf "${FILE_TO_DEL}"
                if [[ ${?} -ne 0 ]]
                then
                    ERROR_FILES[${ERROR_COUNT}]="${FILE_TO_DEL}"
                    let ERROR_COUNT++
                fi
            else
                echo -e "${COLOR_RED}ERROR: Could not delete ${FILE_TO_DEL} --- Not a directory${COLOR_NONE}"
                ERROR_FILES[${ERROR_COUNT}]="${FILE_TO_DEL}"
                let ERROR_COUNT++
            fi
        done < <(find . -type d -name "vendor")

        echo -e "${COLOR_GREEN}Done${COLOR_NONE}"
        echo -e "${COLOR_WHITE}-------------------------------------------------------${COLOR_NONE}"
    fi

done

if [[ ${ERROR_COUNT} -gt 0 ]]
then
    echo -e "${COLOR_RED}\nSome files could not be cleaned and requires user action:${COLOR_NONE}"

    for((i=0; i<${ERROR_COUNT}; i++))
    do
        echo -e "${COLOR_RED}${ERROR_FILES[i]}${COLOR_NONE}"
    done
    exit 2
fi

echo -e "${COLOR_GREEN}\nAll requested files were successfully cleaned.${COLOR_NONE}"
exit 0

